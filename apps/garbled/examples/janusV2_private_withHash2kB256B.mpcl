// -*- go -*-

package main

import (
	"crypto/aes"
	"crypto/hmac"
	"crypto/sha256"
)

// python console
// a = "01010101010101010101010101010101"
// b = ""
// >>> for i in range(16):
// ...     b += a
// ...
// >>> print(b)

// sample values for request computation
// Tests to derive CHTS:
// dES: 0x6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba
// cShare: 0x677f7ff26ac202469e1a2d39dc001c5e7fcfb1f967a3cb4affa51185facc57ac
// pShare: 0xfbe470a4a1e11bbaa2ebb9da082924f99a20681e5feed0000e2d2b5e613d22df
// pModP: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
// HS: c571a176894ac7aff65d52522f4d0861060f3c3b96144567dd10fa79d218d878
// label+H2: 0x002012746c7331332063206873207472616666696320825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc905701
// CHTS: 136513e4c51032bb2ba86892f0e3e24a75b4fbfef56d92cc0c57d4c67a847e65
// CATS: 2c1acaa6e88b118bc46287c99d7800ed3d717f9417672afc9dccd2b3656f0e3e

// mH3=clientlabel+H3: 0x002012746c7331332063206170207472616666696320803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b801
// mIv: 0x000c08746c7331332069760001 (generated with 12)
// mKey: 0x001009746c733133206b65790001 (generated with 16)

// client ECB0: 0xf8895999038a3cb1169a882ebba33ca5
// client ECB1: 0xf0cecf8cdd4452c1f77a297cff13a605
// client key: 93eae267aa1f9088f1735f6435a05add
// client iv: d06ac7f19c2b18e01a62686e
// client masked key: d5ad091155c804d0f135f394a376ed7f
// key mask: 4647eb76ffd794580046acf096d6b7a2
// 256B ECBs: 6a5b4ac24efd0fc5b520d862efe1bd59cd4724e684b2740c032e2f733586cc74cb2eca5b8f4e92660a8929307d30e0859e6ae8a4a62bf0a1080ca0c28416182083a5067033801fce5df37164707be02312db499e4198fa1bd7ef31b1748dbc6f6eb2f01213ddf929af40da7c3ef5e15440abbadccc83dc0e9e207291da6d105b4ce76188d4e4b49e7837bb5e637c661693e635da92bd7633ef064ebc2bec846190ee9428eaf11593a9b226ff43646dee9036fceaccce2b38bf9c8d8b2bca3e0119750323909f7d2c743aceadcfb1f47c9b91a1032bec4e7d68f9b4ca0575b6569e378bec9f85f132322e0691bd272e1ee1925b11ad3b78ef4735880029021a50
// parity: 0x29e0ecc058100b2ee776904b2b265495
// parity mask: 0x4647eb76ffd794580046acf096d6b7a2

// these sample values compute response (server side kdc) data ecbs

// Tests:
// H2: 825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc9057
// H0: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
// H3: 803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b8
// H7: 2958b125185bf3922e4dfdd580027cc7122bcdc5a9dd5ae82c5e37ac5f729e81
// dHS: 70ee9987162bea6719acab976843acf95514f46d19872c2fabfa1a7bf32c5025
// MS: b02d8f9d19b3ae1ba8d00106dac1ed6b2ea55da3fae83b1f66677fa6a781755f
// SATS: b334fa6ef436aa7767b48ca30dfc567de973ecc692b7da661f486f25754de6c1
// ECB1: 895b8c63da8da17e9d6d30c62f09d6f5 // ecb1
// ECBK: 9b89f7120fe41972a4e81f2e63453807 // ecb0
// serverIv: cac3cc248a5e1db3ebbd2a8a
// serverKey: 2ca886649783b6cd626a4b04a96be1ef
// masked server key: d5ad091155c804d0f135f394a376ed7f (mask: 4647eb76ffd794580046acf096d6b7a2)

// used to check/match ecb32, ecb33
// chipertext chunks: ce64df1813d37137142dc0579dc7f4e2ba4f8c7e1fe62b23747998b59da16a3f
// chunkIndex: 32
// number chunks: 2
// plaintext chunks: 302c353631204575726f227d2c227072696365223a2233383030322e32222c22

// dES: 0x6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba
// cShare: 0x677f7ff26ac202469e1a2d39dc001c5e7fcfb1f967a3cb4affa51185facc57ac
// pShare: 0xfbe470a4a1e11bbaa2ebb9da082924f99a20681e5feed0000e2d2b5e613d22df
// pModP: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
// HS: c571a176894ac7aff65d52522f4d0861060f3c3b96144567dd10fa79d218d878
// label+H2: 0x002012746c7331332063206873207472616666696320825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc905701
// mH0=label+H0: 0x00200d746c733133206465726976656420e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85501
// mH3=serverlabel+H3: 0x002012746c7331332073206170207472616666696320803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b801
// server mIv: 0x000c08746c7331332069760001 (generated with 12)
// server mKey: 0x001009746c733133206b65790001 (generated with 16)

// Tests to derive SHTS:
// dES: 0x6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba
// cShare: 0x677f7ff26ac202469e1a2d39dc001c5e7fcfb1f967a3cb4affa51185facc57ac
// pShare: 0xfbe470a4a1e11bbaa2ebb9da082924f99a20681e5feed0000e2d2b5e613d22df
// pModP: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
// HS: c571a176894ac7aff65d52522f4d0861060f3c3b96144567dd10fa79d218d878
// hTwo=mH2=label+H2: 0x002012746c7331332073206873207472616666696320825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc905701
// SHTS: 0x7691bca4c1a92ffc70efe68a178d928540f47254512c290693fbc2a8c28ab59c
// server Parity 16kB: 0x03c5c032c848a055816d588ea53d15c1
// parity mask: "0x4647eb76ffd794580046acf096d6b7a2"

// secret mask (16 bytes): 0x4647eb76ffd794580046acf096d6b7a2

// MPCLDIR=./../../ ./garbled -v -i 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff,0xfbe470a4a1e11bbaa2ebb9da082924f99a20681e5feed0000e2d2b5e613d22df,0x6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba,0x7691bca4c1a92ffc70efe68a178d928540f47254512c290693fbc2a8c28ab59c,0x9b89f7120fe41972a4e81f2e63453807,0x895b8c63da8da17e9d6d30c62f09d6f5,0xf8895999038a3cb1169a882ebba33ca5,0xf0cecf8cdd4452c1f77a297cff13a605,0x6b5a4bc34ffc0ec4b421d963eee0bc58cc4625e785b3750d022f2e723487cd75ca2fcb5a8e4f93670b8828317c31e1849f6be9a5a72af1a0090da1c38517192182a4077132811ecf5cf27065717ae12213da489f4099fb1ad6ee30b0758cbd6e6fb3f11312dcf828ae41db7d3ff4e05541aabbddcd82dd0f9f217390db6c115a4de66089d5e5b59f7936ba5f627d671792e734db93bc7732ee074fbd2aed856091ef9529ebf01492a8b327fe42656cef9137fdebcdcf2a39be9d8c8a2acb3f0018740222919e7c2d753bcfacceb0f57d9a90a0022aed4f7c69f8b5cb0474b7579f368aed9e84f033332f0790bc262f1fe0935a10ac3a79ee4634890128031b51,0xc1277aac165282cd00923481d919c6449b9f770b76bf15f63a02c087e144f0715853f1729d92200a766040d3ec296e298cf82d263dc1499e7f1fe82115c8a3af0d03b162ee94e5267e4bb93f5c768cae72028ef51b0a6600a5efce6e4497d4e78356bd3aaff702d3297272182b2407dcd2c0c97cec3c34773cee99c8e284c908d36145eca39268b4df4d5ee99d858a5c45629cab2ee8d781188f2bc69341a7fb1cf9427fe5fb2471ae3de52a24cd707e2a19da3baf9096ab21c1c1a1a38f9f95445b598504a2481280b1a77e73c8c2fa41d6bbd37c688f1159b915f28d937dbea1dbc137c68d64e629d011037daead13dc0d68db3633f38b4ed412d7ecda8db41880944ef7fb333752b82e841cf9a4e6c279a8cb2cd5f60aa1d759404790fd834803ce6094fd4680f65c244d847412ebaf2b6371283dab666830e436056dfa05659c97af6d479b8362c7f69f86b25407b84d5784db699214eec1ee86dcf5fe6630a711f6c631564f6e123e9070727f6d8e1f0baec18c8b850165c7719f16960ac54da0d92971dc2b060c42690155466e7fa38246a3ce70da8913d203e953ce517345eaf04723a7dd4697914f71d62a0e568834202048dbe1a7d5065bee958e3b862d61d929f4dd9f9799131bbcae787375ddb79ac6dae0b782b3edb4fedaec8bff49eb2f23f235436743e32bb0e48591d22de85d24c5191a4548ab9aae82471c133a8021408dffabc37ad734b2c4b73983846d8798b4891184f62a5ca8eaba20076087c945b5b361b6ea656b3a101745375b5166e697c5d22e482425facb650986e0fa0c93f3aed927726721e80f03732b2f57fa8e7d40cfb3e2c9213998e9590a7cea3b3845f9ef3e18606b73347f8dd25dc149b74490c386e913b740ae10c90dd5373205e34528be701d2f2181e20d98ba7c1d0a6a97b497540436b15aea62666651ee1d4db741125e27bb0b5f830cee04203b222b7364c18535ea067f3f022e24268b2b69d77c3c32c1a86849dc4754f5aacbd655c4d3321199ee28c9a39d6b641cb0f23c6702941c8dbc50be8add290fc93875a9061d0874c1a341ee5e75b3943ff2d0019e5a2521c924d0b890bdfd6b41f72e970bcff6af45b5dc9151e7fc64a6f122e6ff7101cf127cafd27f8835dd2d64047dde2b79c1c731559f3e50f6dea1258f96c78f86d9b02e11e06437fb16bccf87642948c7499a59fb91466be89f0895e0636a6c434a07c135d2679d19261baa05279c6ad7d057379d1a418cb4d9db953a58ad151b56cda988290d1d1b1bddd2dc91fbd3d6dd08aba8715f262453690412d19c1530a3a5eadc478d6d8efdb6c7f42b00373bc994eb01fdc1b3cca62afec87c9466c61dee603784c99b69b1a33f33c8349279879b68d691c80a0f49052f69b95f4e795e912587661ff435fc64d15ee5bf69b23c9acba15c2dc84c552e44bfef889467e703bd1e84af9132f765e055ce47d43597775d0c6c423ec05b1e6d29f3345e6c275693c38e9872825ebb3f5c5a6f5b6d94d6c6dfe9d120934f2ecdfccb7ea642b4059a1c9c5e7d610007ed966dd8674a1947543902bb9a52306493dbf8d816d58b6113b8915c6b4dfe341b6807ab3f1551ecbd890504dc5f49895d974ed7e6eb2a8233249f0e859fea0a92b898079573c9294514af0cbd8a6236e2b44c2fd7853fd1b20d2c06fe2d43ae059f3416609cea41f0b4aa8aa55079e0eb9ad0ac8f739d00f29ffe86a0d2d499578af15b786b5d022a38433d08f81cc4c530c2956e16444e8eb089ac74e44627e876bac46502aec701640d199462a807cefe8868b4b504424d3dbee566f8ba3ab46bd969908244f898c01a46d17544e38332dd2dc9b0a9c30cec514bc41398a9082deda9c1939975dd50ae94a80a82ff747ec36458b63ca8846ad3aeca884f8b07441626b6c4cc046ff65eeb4c5e199a6633b86358c58405e8191772801d695494815d2865bb962da90c8e29c52401e2aef677674c129cadb3c00c4bbecb48da088e1816d5d01e9206bbffe2be19383f0937abcd00fbc39da4fcdbae230445072c7f0ac9584b464c5b6ff485aae535a6e646a8a8896df8d7300c576a3303f8bb9ec3f9cae6c888de1201fd9587731aa365c298fef819f1e9e6062337dad599332fc29342d5107cb62614ebb9b42894976fbacd776a35f0513a1ed0460523784b9ed3c22516abc488d2d514cd74aa92c81357da35b3f96521c30c9815480449ba74b77fec778ea456e0075dc4e3374816aedd75dde828091d3d1862f7f4ce1f7f1dc1482fd08a32813b15b2f703a2b22f32adfcc85dee365f38fb3835947c2782683fbadb9878f4c7383c16edbe24961f3ffcbae1332d9d99be299cb66e87cf508d99230446686b40a3ce3ae85d329b512a89071dccf278a773432338eddef3cfa34c13809a19c5cc75b141aebb3cc56e95dae178ec0393eff6f0caa9c21c88061c873569e7a5a9b4447cb45f4bd594d43028fb400733bb5632d57e4b10ce18ebcaf556443e09b864ba9748ec535c7e1ae8b9db9b66022f357f6963d92771b03bb3bdcb278cc9f97b05180009c076184a644cc836280206008251e0d85dbbc747b23fe70b8c5c87e4b6f456cd40f5501853f93ee5f109ecdf5aa8902d7b49086b497c276862d2f15d123bbff236e5ca156360ed08593e4847b49a4788b5eb12749969bb9a219f3e87dc972eca0657b48eace64c3b056e0fc136671c61c486768fabe070ca89e397844172bdd6e0754f667b8a211ee789047b27b8a0982acb5d5d93bb7ac60d38cc6fc71eecc4e79826e80a8b3e44263643579125cd5a2fee57db4693d7b5ed64380a3cf8ef9a9a6492982f93f301b73dc2717357a4892c52a99bc0b7b664a19555c1b27da5ec75,0x7c7d2eb358671b401d2a5e59bf56e7163e16994a170d4788faad9be5d82363b2 examples/janusV2_private_withHash2kB256B.mpcl
type Garbler struct {
	modP            uint512
	privShare       uint512
	dES             [32]byte
	SHTS            [32]byte
	ECB0            [32]byte
	ECB1            [32]byte
	cECB0           [32]byte
	cECB1           [32]byte
	cipherChunkReq  [256]byte
	cipherChunkResp [2048]byte
	plainHash       [32]byte
}

// MPCLDIR=./../../ ./garbled -e -v -i 0x677f7ff26ac202469e1a2d39dc001c5e7fcfb1f967a3cb4affa51185facc57ac,0x002012746c7331332073206873207472616666696320825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc905701,0x00200d746c733133206465726976656420e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85501,0x002012746c7331332073206170207472616666696320803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b801,0x002012746c7331332063206170207472616666696320803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b801,0x000c08746c7331332069760001,0x001009746c733133206b65790001,0xxexamples/janusV2_private_withHash2kB256B.mpcl
type Evaluator struct {
	// privShare [32]byte
	privShare      uint512
	hTwo           [55]byte
	hZero          [50]byte
	hThree         [55]byte
	hThreeC        [55]byte
	ivLabel        [13]byte
	keyLabel       [14]byte
	plainChunkReq  [256]byte
	plainChunkResp [2048]byte
}

func main(g Garbler, e Evaluator) uint8 { // uint8, ([]byte, []byte), []byte

	// combine secret shares into DHE
	DHE := (g.privShare + e.privShare) % g.modP
	bytesDHE := uint512ToByte(DHE)[32:]
	// compute HS
	HS := hmac.SumSHA256(bytesDHE[:], g.dES)

	// compute SHTS
	var mH2 [55]byte
	// must be set individually because 0x00 start is discarded when parsed
	mH2[0] = 0x00
	for i := 1; i < 55; i++ {
		mH2[i] = e.hTwo[i-1]
	}
	SHTS := hmac.SumSHA256(mH2[:], HS)

	// check SHTS against public input
	for i := 0; i < 32; i++ {
		if (SHTS[i] ^ g.SHTS[i]) != 0x00 {
			return 0x00
		}
	}

	// compute dHS
	var mH0 [50]byte
	mH0[0] = 0x00
	for i := 1; i < 50; i++ {
		mH0[i] = e.hZero[i-1]
	}
	dHS := hmac.SumSHA256(mH0[:], HS)

	// compute MS
	var zeros32 [32]byte
	MS := hmac.SumSHA256(zeros32[:], dHS)

	// compute CATS
	var mH3c [55]byte
	mH3c[0] = 0x00
	for i := 1; i < 55; i++ {
		mH3c[i] = e.hThreeC[i-1]
	}
	CATS := hmac.SumSHA256(mH3c[:], MS)

	// compute iv (to be disclosed in plain)
	var mIv [13]byte
	mIv[0] = 0x00
	for i := 1; i < 13; i++ {
		mIv[i] = e.ivLabel[i-1]
	}
	civ := hmac.SumSHA256(mIv[:], CATS)[:12]

	// compute client traffic key
	var mKey [14]byte
	mKey[0] = 0x00
	for i := 1; i < 14; i++ {
		mKey[i] = e.keyLabel[i-1]
	}
	ckey := hmac.SumSHA256(mKey[:], CATS)[:16]

	// compute SATS
	var mH3 [55]byte
	mH3[0] = 0x00
	for i := 1; i < 55; i++ {
		mH3[i] = e.hThree[i-1]
	}
	SATS := hmac.SumSHA256(mH3[:], MS)

	// compute iv (to be disclosed in plain)
	iv := hmac.SumSHA256(mIv[:], SATS)[:12]

	// compute server traffic key
	key := hmac.SumSHA256(mKey[:], SATS)[:16]

	// compute request ecbs (check input correctness)
	var czeros16 [16]byte
	cECBK := aes.Block128(ckey, czeros16)
	cnonce := getNonce(civ, 1)
	cECB1 := aes.Block128(ckey, cnonce)

	// match ecb0, ecb1 against public input
	for i := 0; i < 16; i++ {
		if (cECB1[i] ^ g.cECB1[i]) != 0x00 {
			return 0x00
		}
		if (cECBK[i] ^ g.cECB0[i]) != 0x00 {
			return 0x00
		}
	}

	// compute response ecbs
	var zeros16 [16]byte
	ECBK := aes.Block128(key, zeros16)
	nonce := getNonce(iv, 1)
	ECB1 := aes.Block128(key, nonce)
	var counter [aes.BlockSize]byte
	counter = memcpy(counter, 0, iv, 0)
	counter = incr(counter)

	// match ecb0, ecb1 against public input
	for i := 0; i < 16; i++ {
		if (ECB1[i] ^ g.ECB1[i]) != 0x00 {
			return 0x00
		}
		if (ECBK[i] ^ g.ECB0[i]) != 0x00 {
			return 0x00
		}
	}

	// server side response ecb verification
	var block [aes.BlockSize]byte
	numberChunks := (128 * 16)
	var cipher1 [numberChunks]byte

	// loop increments with 16 step size
	for i := 0; i < numberChunks; i += aes.BlockSize {
		counter = incr(counter)
		block = aes.Block128(key, counter)
		for j := 0; j < aes.BlockSize; j++ {
			cipher1[i+j] = block[j] ^ e.plainChunkResp[j]

			if (cipher1[i+j] ^ g.cipherChunkResp[i+j]) != 0 {
				return 0x00
			}
		}
	}

	// client request parity check, no need to verify SHTS twice and must not check ecb0,ecb1
	var block2 [aes.BlockSize]byte
	numberChunks2 := (16 * 16)
	var cipher2 [numberChunks2]byte

	var counter2 [aes.BlockSize]byte
	counter2 = memcpy(counter2, 0, civ, 0)
	counter2 = incr(counter2)
	for i := 0; i < numberChunks2; i += aes.BlockSize {
		counter2 = incr(counter2)
		block2 = aes.Block128(ckey, counter2)
		for j := 0; j < aes.BlockSize; j++ {
			cipher2[i+j] = block2[j] ^ e.plainChunkReq[j]

			if (cipher2[i+j] ^ g.cipherChunkReq[i+j]) != 0 {
				return 0x00
			}
		}

	}

	// document hash on private data
	hash := sha256.Sum256(e.plainChunkResp[:])

	// compare hash
	for i := 0; i < 32; i++ {
		if (hash[i] ^ g.plainHash[i]) != 0 {
			return 0x00
		}
	}

	return 0x01
}

func byteToUint128(x [16]byte) uint128 {
	var r uint128

	for i := 0; i < len(x); i++ {
		r <<= 8
		r |= uint128(x[i])
	}
	return r
}

func uint128ToByte(x uint128) [16]byte {
	var r [16]byte

	for i := 0; i < 16; i++ {
		r[15-i] = x & 0xff
		x >>= 8
	}
	return r
}

func incr(counter [aes.BlockSize]byte) [aes.BlockSize]byte {
	var c uint32

	for i := 0; i < 4; i++ {
		c <<= 8
		c |= uint32(counter[12+i])
	}
	c++
	for i := 0; i < 4; i++ {
		counter[15-i] = c & 0xff
		c >>= 8
	}
	return counter
}

func memcpy(dst []byte, dstOfs int, src []byte, srcOfs int) []byte {
	for i := 0; srcOfs+i < len(src) && dstOfs+i < len(dst); i++ {
		dst[dstOfs+i] = src[srcOfs+i]
	}
	return dst
}

func byteToUint512(x [64]byte) uint512 {
	var r uint512

	for i := 0; i < len(x); i++ {
		r <<= 8
		r |= uint512(x[i])
	}
	return r
}

func uint512ToByte(x uint512) [64]byte {
	var r [64]byte

	for i := 0; i < 64; i++ {
		r[63-i] = x & 0xff
		x >>= 8
	}
	return r
}

func getNonce(iv [12]byte, counter uint32) [16]byte {
	var nonce [16]byte
	for i := 0; i < 12; i++ {
		nonce[i] = iv[i]
	}
	// var counter uint32
	// counter = 1
	counterBytes := uint32ToByte(counter)
	for i := 0; i < 4; i++ {
		nonce[12+i] = counterBytes[i]
	}
	return nonce
}

func uint32ToByte(x uint32) [4]byte {
	var r [4]byte

	for i := 0; i < 4; i++ {
		r[3-i] = x & 0xff
		x >>= 8
	}
	return r
}
