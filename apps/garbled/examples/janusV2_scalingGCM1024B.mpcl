// -*- go -*-

package main

import (
	"crypto/aes"
)

// sample values for request computation
// Tests to derive CHTS:
// dES: 0x6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba
// cShare: 0x677f7ff26ac202469e1a2d39dc001c5e7fcfb1f967a3cb4affa51185facc57ac
// pShare: 0xfbe470a4a1e11bbaa2ebb9da082924f99a20681e5feed0000e2d2b5e613d22df
// pModP: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
// HS: c571a176894ac7aff65d52522f4d0861060f3c3b96144567dd10fa79d218d878
// label+H2: 0x002012746c7331332063206873207472616666696320825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc905701
// CHTS: 136513e4c51032bb2ba86892f0e3e24a75b4fbfef56d92cc0c57d4c67a847e65
// CATS: 2c1acaa6e88b118bc46287c99d7800ed3d717f9417672afc9dccd2b3656f0e3e

// mH3=clientlabel+H3: 0x002012746c7331332063206170207472616666696320803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b801
// mIv: 0x000c08746c7331332069760001 (generated with 12)
// mKey: 0x001009746c733133206b65790001 (generated with 16)

// client ECB0: 0xf8895999038a3cb1169a882ebba33ca5
// client ECB1: 0xf0cecf8cdd4452c1f77a297cff13a605
// client key: 93eae267aa1f9088f1735f6435a05add
// client iv: d06ac7f19c2b18e01a62686e
// client masked key: d5ad091155c804d0f135f394a376ed7f
// key mask: 4647eb76ffd794580046acf096d6b7a2
// 256B ECBs: 6a5b4ac24efd0fc5b520d862efe1bd59cd4724e684b2740c032e2f733586cc74cb2eca5b8f4e92660a8929307d30e0859e6ae8a4a62bf0a1080ca0c28416182083a5067033801fce5df37164707be02312db499e4198fa1bd7ef31b1748dbc6f6eb2f01213ddf929af40da7c3ef5e15440abbadccc83dc0e9e207291da6d105b4ce76188d4e4b49e7837bb5e637c661693e635da92bd7633ef064ebc2bec846190ee9428eaf11593a9b226ff43646dee9036fceaccce2b38bf9c8d8b2bca3e0119750323909f7d2c743aceadcfb1f47c9b91a1032bec4e7d68f9b4ca0575b6569e378bec9f85f132322e0691bd272e1ee1925b11ad3b78ef4735880029021a50
// parity: 0x29e0ecc058100b2ee776904b2b265495
// parity mask: 0x4647eb76ffd794580046acf096d6b7a2

// these sample values compute response (server side kdc) data ecbs

// Tests:
// H2: 825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc9057
// H0: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
// H3: 803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b8
// H7: 2958b125185bf3922e4dfdd580027cc7122bcdc5a9dd5ae82c5e37ac5f729e81
// dHS: 70ee9987162bea6719acab976843acf95514f46d19872c2fabfa1a7bf32c5025
// MS: b02d8f9d19b3ae1ba8d00106dac1ed6b2ea55da3fae83b1f66677fa6a781755f
// SATS: b334fa6ef436aa7767b48ca30dfc567de973ecc692b7da661f486f25754de6c1
// ECB1: 895b8c63da8da17e9d6d30c62f09d6f5 // ecb1
// ECBK: 9b89f7120fe41972a4e81f2e63453807 // ecb0
// serverIv: cac3cc248a5e1db3ebbd2a8a
// serverKey: 2ca886649783b6cd626a4b04a96be1ef
// masked server key: d5ad091155c804d0f135f394a376ed7f (mask: 4647eb76ffd794580046acf096d6b7a2)

// used to check/match ecb32, ecb33
// chipertext chunks: ce64df1813d37137142dc0579dc7f4e2ba4f8c7e1fe62b23747998b59da16a3f
// chunkIndex: 32
// number chunks: 2
// plaintext chunks: 302c353631204575726f227d2c227072696365223a2233383030322e32222c22

// dES: 0x6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba
// cShare: 0x677f7ff26ac202469e1a2d39dc001c5e7fcfb1f967a3cb4affa51185facc57ac
// pShare: 0xfbe470a4a1e11bbaa2ebb9da082924f99a20681e5feed0000e2d2b5e613d22df
// pModP: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
// HS: c571a176894ac7aff65d52522f4d0861060f3c3b96144567dd10fa79d218d878
// label+H2: 0x002012746c7331332063206873207472616666696320825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc905701
// mH0=label+H0: 0x00200d746c733133206465726976656420e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85501
// mH3=serverlabel+H3: 0x002012746c7331332073206170207472616666696320803fe80818374bc995571054979e54a316f266b4908ed43f5df4752bdef093b801
// server mIv: 0x000c08746c7331332069760001 (generated with 12)
// server mKey: 0x001009746c733133206b65790001 (generated with 16)

// Tests to derive SHTS:
// dES: 0x6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba
// cShare: 0x677f7ff26ac202469e1a2d39dc001c5e7fcfb1f967a3cb4affa51185facc57ac
// pShare: 0xfbe470a4a1e11bbaa2ebb9da082924f99a20681e5feed0000e2d2b5e613d22df
// pModP: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
// HS: c571a176894ac7aff65d52522f4d0861060f3c3b96144567dd10fa79d218d878
// hTwo=mH2=label+H2: 0x002012746c7331332073206873207472616666696320825e4f79bbcb0e8adb287cac19c378145b7d6c465734422da6882463eadc905701
// SHTS: 0x7691bca4c1a92ffc70efe68a178d928540f47254512c290693fbc2a8c28ab59c
// server Parity 16kB: 0x03c5c032c848a055816d588ea53d15c1
// parity mask: "0x4647eb76ffd794580046acf096d6b7a2"

// secret mask (16 bytes): 0x4647eb76ffd794580046acf096d6b7a2

// MPCLDIR=./../../ ./garbled -v -i 0x2ca886649783b6cd626a4b04a96be1ef,0xcac3cc248a5e1db3ebbd2a8a,0xexamples/janusV2_scalingGCM1024B.mpcl
type Garbler struct {
	key            [16]byte
	iv             [12]byte
	plainChunkResp [1024]byte
}

// MPCLDIR=./../../ ./garbled -e -v -i 0xc1277aac165282cd00923481d919c6449b9f770b76bf15f63a02c087e144f0715853f1729d92200a766040d3ec296e298cf82d263dc1499e7f1fe82115c8a3af0d03b162ee94e5267e4bb93f5c768cae72028ef51b0a6600a5efce6e4497d4e78356bd3aaff702d3297272182b2407dcd2c0c97cec3c34773cee99c8e284c908d36145eca39268b4df4d5ee99d858a5c45629cab2ee8d781188f2bc69341a7fb1cf9427fe5fb2471ae3de52a24cd707e2a19da3baf9096ab21c1c1a1a38f9f95445b598504a2481280b1a77e73c8c2fa41d6bbd37c688f1159b915f28d937dbea1dbc137c68d64e629d011037daead13dc0d68db3633f38b4ed412d7ecda8db41880944ef7fb333752b82e841cf9a4e6c279a8cb2cd5f60aa1d759404790fd834803ce6094fd4680f65c244d847412ebaf2b6371283dab666830e436056dfa05659c97af6d479b8362c7f69f86b25407b84d5784db699214eec1ee86dcf5fe6630a711f6c631564f6e123e9070727f6d8e1f0baec18c8b850165c7719f16960ac54da0d92971dc2b060c42690155466e7fa38246a3ce70da8913d203e953ce517345eaf04723a7dd4697914f71d62a0e568834202048dbe1a7d5065bee958e3b862d61d929f4dd9f9799131bbcae787375ddb79ac6dae0b782b3edb4fedaec8bff49eb2f23f235436743e32bb0e48591d22de85d24c5191a4548ab9aae82471c133a8021408dffabc37ad734b2c4b73983846d8798b4891184f62a5ca8eaba20076087c945b5b361b6ea656b3a101745375b5166e697c5d22e482425facb650986e0fa0c93f3aed927726721e80f03732b2f57fa8e7d40cfb3e2c9213998e9590a7cea3b3845f9ef3e18606b73347f8dd25dc149b74490c386e913b740ae10c90dd5373205e34528be701d2f2181e20d98ba7c1d0a6a97b497540436b15aea62666651ee1d4db741125e27bb0b5f830cee04203b222b7364c18535ea067f3f022e24268b2b69d77c3c32c1a86849dc4754f5aacbd655c4d3321199ee28c9a39d6b641cb0f23c6702941c8dbc50be8add290fc93875a9061d0874c1a341ee5e75b3943ff2d0019e5a2521c924d0b890bdfd6b41f72e970bcff6af45b5dc9151e7fc64a6f122e6ff7101cf127cafd27f8835dd2d64047dde2b79c1c731559f3e50f6dea1258f96c78f86d9b02e11e06437fb16bccf87642948c7499a59fb91466be89f0895e0636a6c434a07c135d2679d19261baa05279c6ad7d057379d1a418cb4d9db953a58ad151b56cda988290d1d1b1bddd2dc91fbd3d6dd08aba8715f262453690412d19c1530a3a5eadc478d6d8efdb6c7f42b00373bc994eb01fdc1b3cca62afec87c9466c61dee603784c99b69b1a33f33c8349279879b68d691c80a0f49052f69b95f4e795e912587661ff435fc64d15ee5bf69b23c9acba15c2dc8 examples/janusV2_scalingGCM1024B.mpcl
type Evaluator struct {
	cipherChunkResp [1024]byte
}

func main(g Garbler, e Evaluator) uint8 { // uint8, ([]byte, []byte), []byte

	// init counter
	var counter [aes.BlockSize]byte
	counter = memcpy(counter, 0, g.iv[:], 0)
	counter = incr(counter)

	// server side response ecb verification
	var block [aes.BlockSize]byte
	numberChunks := (16 * 64)
	var cipher1 [numberChunks]byte

	// loop increments with 16 step size
	for i := 0; i < numberChunks; i += aes.BlockSize {
		counter = incr(counter)
		block = aes.Block128(g.key, counter)
		for j := 0; j < aes.BlockSize; j++ {
			cipher1[i+j] = block[j] ^ g.plainChunkResp[j]

			if (cipher1[i+j] ^ e.cipherChunkResp[i+j]) != 0 {
				return 0x00
			}
		}
	}

	// return cipher1[:]
	return 0x01
}

func byteToUint128(x [16]byte) uint128 {
	var r uint128

	for i := 0; i < len(x); i++ {
		r <<= 8
		r |= uint128(x[i])
	}
	return r
}

func uint128ToByte(x uint128) [16]byte {
	var r [16]byte

	for i := 0; i < 16; i++ {
		r[15-i] = x & 0xff
		x >>= 8
	}
	return r
}

func incr(counter [aes.BlockSize]byte) [aes.BlockSize]byte {
	var c uint32

	for i := 0; i < 4; i++ {
		c <<= 8
		c |= uint32(counter[12+i])
	}
	c++
	for i := 0; i < 4; i++ {
		counter[15-i] = c & 0xff
		c >>= 8
	}
	return counter
}

func memcpy(dst []byte, dstOfs int, src []byte, srcOfs int) []byte {
	for i := 0; srcOfs+i < len(src) && dstOfs+i < len(dst); i++ {
		dst[dstOfs+i] = src[srcOfs+i]
	}
	return dst
}

func byteToUint512(x [64]byte) uint512 {
	var r uint512

	for i := 0; i < len(x); i++ {
		r <<= 8
		r |= uint512(x[i])
	}
	return r
}

func uint512ToByte(x uint512) [64]byte {
	var r [64]byte

	for i := 0; i < 64; i++ {
		r[63-i] = x & 0xff
		x >>= 8
	}
	return r
}

func getNonce(iv [12]byte, counter uint32) [16]byte {
	var nonce [16]byte
	for i := 0; i < 12; i++ {
		nonce[i] = iv[i]
	}
	// var counter uint32
	// counter = 1
	counterBytes := uint32ToByte(counter)
	for i := 0; i < 4; i++ {
		nonce[12+i] = counterBytes[i]
	}
	return nonce
}

func uint32ToByte(x uint32) [4]byte {
	var r [4]byte

	for i := 0; i < 4; i++ {
		r[3-i] = x & 0xff
		x >>= 8
	}
	return r
}
